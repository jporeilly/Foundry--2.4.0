---
# Install Foundry Control Plane
- name: Install Foundry Services
  hosts: "{{ groups['installer'][0] }}"
  become: false
  gather_facts: true
  vars:
    packages_dir: ~/Packages
    foundry_home: ~/Packages/Foundry-2.4.0
    foundry_package: Foundry-2.4.0
    foundry_control: Foundry-Control-Plane-2.4.0
    logs_dir: ~/Packages/Foundry-2.4.0/logs
    
  tasks:
    - name: Ping Nodes
      ping:
      tags: 
       - info

    # Checks for the logs directory
    - name: Check if "{{ logs_dir }}" directory exists
      stat:
        path: "{{ logs_dir }}"
      register: logs
      tags: 
       - info 

    - debug: 
        msg: "logs directory exists: {{ logs.stat.exists }}"
      tags: 
       - info           

    # Create a log directory - if required
    - name: Create "{{ logs_dir }}" Directory
      file:
       path: "{{ logs_dir }}"
       state: directory
      when: logs.stat.exists == false
      tags: 
       - info

    # Unarchive Foundry-Control-Plane-2.4.0.tgz
    - name: Unarchive {{ foundry_control }}.tgz
      unarchive:
        src: "{{ packages_dir }}/{{ foundry_control }}.tgz"
        dest: "{{ foundry_home }}"
      when: logs.stat.exists == true  
      tags: 
       - unpack 

    # Install Cluster Services
    - name: Install Cluster Services
      shell: 
        chdir: "{{ foundry_home }}"
        cmd: ./bin/install-cluster-services.sh -r {{ registry_domain }}:{{ registry_port }} -u installer -p lumada -D true 2>&1 | tee -a {{ logs_dir }}/install-cluster-services-2.4.0.log
      async: 2500
      poll: 30
      register: ret
      failed_when: "ret.rc > 0 or 'no such file' in ret.stdout"
      tags:
       - install 
       - install_cs

    # Install Foundry CRDs
    - name: Run Custom Resource Definitions Script
      shell: 
        chdir: "{{ foundry_home }}"
        cmd: ./bin/apply-crds.sh -e -r {{ registry_domain }}:{{ registry_port }} -u installer -p lumada -D true 2>&1 | tee -a {{ logs_dir }}/apply-crds.log
      async: 2500
      poll: 30
      register: ret
      failed_when: "ret.rc > 0 or 'no such file' in ret.stdout"
      tags: 
       - install
       - install_crds

    # Install the Foundry Soluton Control Plane
    - name: Install Foundry Solution Control Plane
      shell: 
        chdir: "{{ foundry_home }}"
        cmd: ./bin/install-control-plane.sh -r {{ registry_domain }}:{{ registry_port }} -D true -c https://{{ apiserver_loadbalancer_domain_name }} 2>&1 | tee -a {{ logs_dir }}/install-control-plane-2.2.1.log
      async: 2500
      poll: 30
      register: ret
      failed_when: "ret.rc > 0 or 'no such file' in ret.stdout"
      tags: 
       - install
       - install_cp

    # Check hitachi-solutions pods
    - name: Confirm Foundry
      shell: "{{ item }}"
      with_items:
        - "kubectl get pods -n hitachi-solutions"
      register: foundry_pods
      tags:
       - install 
       - info

    # Foundry user password
    - name: Confirm Foundry User
      shell: echo $(kubectl get keycloakusers -n hitachi-solutions keycloak-user -o jsonpath="{.spec.user.credentials[0].value}")
      register: foundry_pass
      tags:
       - install 
       - info

    - name: Foundry URLs
      debug:
        msg: 
        - " Installation complete.... "
        - "          Logs can be found in {{ logs_dir }}"
        - "          URL: https://{{ apiserver_loadbalancer_domain_name }}/hitachi-solutions/hscp-hitachi-solutions/solution-control-plane/"
        - "          as foundry/{{ foundry_pass.stdout }}"
      tags: 
       - install
       - info